{"version":3,"sources":["helpers.js","components/Palette.js","App.js","index.js"],"names":["rgbToHsl","c","h","s","r","g","b","max","Math","min","l","d","Palette","colours","segmentSize","drawWidth","drawHeight","sort","border","responseData","canvasRef","useRef","useState","context","setContext","responder","useCallback","data","useEffect","current","renderCtx","getContext","colourCount","xpos","ypos","totalColours","forEach","colour","rect","x","y","width","height","fillStyle","fillRect","drawPalette","map","i","color","index","c1","c2","hslSort","style","textAlign","id","ref","marginTop","App","setColours","setSegmentSize","setSort","setDrawWidth","setDrawHeight","setBorder","setTotalColours","handleSlider","event","target","name","parseInt","value","handleSort","dataset","push","generateColoursArray","calculatedHeight","floor","className","htmlFor","type","onChange","checked","data-sort","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAsCO,SAASA,EAASC,GACxB,IAEIC,EAAGC,EAFHC,EAAIH,EAAE,GAAG,IAAKI,EAAIJ,EAAE,GAAG,IAAKK,EAAIL,EAAE,GAAG,IACrCM,EAAMC,KAAKD,IAAIH,EAAGC,EAAGC,GAAIG,EAAMD,KAAKC,IAAIL,EAAGC,EAAGC,GACxCI,GAAKH,EAAME,GAAO,EAE5B,GAAGF,IAAQE,EACVP,EAAIC,EAAI,MACF,CACN,IAAIQ,EAAIJ,EAAME,EAEd,OADAN,EAAIO,EAAI,GAAMC,GAAK,EAAIJ,EAAME,GAAOE,GAAKJ,EAAME,GACxCF,GACP,KAAKH,EAAGF,GAAKG,EAAIC,GAAKK,GAAKN,EAAIC,EAAI,EAAI,GAAI,MAC3C,KAAKD,EAAGH,GAAKI,EAAIF,GAAKO,EAAI,EAAG,MAC7B,QAAST,GAAKE,EAAIC,GAAKM,EAAI,EAE3BT,GAAK,EAEN,MAAO,CAAK,IAAJA,EAAa,IAAJC,EAAa,IAAJO,GAGpB,I,OCtDME,EAAU,SAAC,GAQjB,IAPLC,EAOI,EAPJA,QACAC,EAMI,EANJA,YACAC,EAKI,EALJA,UACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,OACAC,EACI,EADJA,aAGKC,EAAYC,mBAClB,EAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACOC,EAAYC,uBAAY,SAACC,GAC7BR,EAAaQ,KACZ,CAACR,IAeL,OAbAS,qBAAU,WACT,GAAIR,EAAUS,QAAS,CACtB,IAAMC,EAAYV,EAAUS,QAAQE,WAAW,MAC3CD,GACHN,EAAWM,GAGb,GAAIP,EAAS,CACT,IAAIS,EDfiB,SAACnB,EAASU,EAAST,EAAaC,GACzD,IAAIkB,EAAO,EACPC,EAAO,EACPC,EAAe,EAkBnB,OAjBAtB,EAAQuB,SAAQ,SAACC,GACf,kBAAkBA,EAAlB,GAAOjC,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACMgC,EAAO,CACXC,EAAGN,EACHO,EAAGN,EACHO,MAAO3B,EACP4B,OAAQ5B,GAEVS,EAAQoB,UAAR,cAA2BvC,EAA3B,aAAiCC,EAAjC,aAAuCC,EAAvC,KACAiB,EAAQqB,SAASN,EAAKC,EAAGD,EAAKE,EAAGF,EAAKG,MAAOH,EAAKI,QAClDP,GAAgB,GAChBF,GAAcnB,IACFC,IACVmB,GAAQpB,EACRmB,EAAO,MAGJE,ECNeU,CD8BD,SAAChC,EAASI,GAC/B,OAAc,IAAVA,EACOJ,EAEFA,EAAQiC,KAAI,SAAS7C,EAAG8C,GAE7B,MAAO,CAACC,MAAOhD,EAASC,GAAIgD,MAAOF,MAClC9B,MAAK,SAASiC,EAAIC,GAEnB,OAAOD,EAAGF,MAAM/B,GAAQkC,EAAGH,MAAM/B,MAChC6B,KAAI,SAASnB,GAEd,OAAOd,EAAQc,EAAKsB,UC1CUG,CAAQvC,EAASI,GAAOM,EAAST,EAAaC,GAC5EU,EAAUO,MAEZ,CAACT,EAAST,EAAaD,EAASE,EAAWE,EAAMQ,IAGnD,qBACC4B,MAAO,CACNC,UAAW,UAFb,SAIC,wBACCC,GAAG,SACHC,IAAKpC,EACLqB,MAAO1B,EACP2B,OAAQ1B,EACRqC,MAAO,CACNnC,QAAoB,IAAXA,EAAkB,kBAAoB,GAC/CuC,UAAW,SCuJDC,MA/Lf,WACE,MAA8BpC,mBAAS,CAAC,EAAE,EAAE,IAA5C,mBAAOT,EAAP,KAAgB8C,EAAhB,KACD,EAAsCrC,mBAAS,GAA/C,mBAAOR,EAAP,KAAoB8C,EAApB,KACA,EAAwBtC,oBAAU,GAAlC,mBAAOL,EAAP,KAAa4C,EAAb,KACA,EAAkCvC,mBAAS,MAA3C,mBAAOP,EAAP,KAAkB+C,EAAlB,KACC,EAAoCxC,mBAAS,KAA7C,mBAAON,EAAP,KAAmB+C,EAAnB,KACA,EAA4BzC,oBAAS,GAArC,mBAAOJ,EAAP,KAAe8C,EAAf,KACA,EAAwC1C,mBAAS,GAAjD,mBAAOa,EAAP,KAAqB8B,EAArB,KAEMC,EAAe,SAACC,GACM,gBAAtBA,EAAMC,OAAOC,KACfT,EAAeU,SAASH,EAAMC,OAAOG,QACN,cAAtBJ,EAAMC,OAAOC,MACtBP,EAAaQ,SAASH,EAAMC,OAAOG,SAGjCC,EAAa,SAACL,GAClBN,EAAQS,SAASH,EAAMC,OAAOK,QAAQxD,QAgBzC,OAVCW,qBAAU,WACR+B,EF5BgC,WAEnC,IADA,IAAI9C,EAAU,GACLT,EAAI,EAAGA,GAAK,IAAKA,GAAG,EAC5B,IAAK,IAAIC,EAAI,EAAGA,GAAK,IAAKA,GAAG,EAC5B,IAAK,IAAIC,EAAI,EAAGA,GAAK,IAAKA,GAAG,EAC5BO,EAAQ6D,KAAK,CAACtE,EAAGC,EAAGC,IAIvB,OAAOO,EEmBO8D,MACX,IAEF/C,qBAAU,WACR,IAAIgD,EAAmBpE,KAAKqE,MAAO,MAAQrE,KAAKqE,MAAM9D,EAAYD,GAAgBA,GAC9E8D,EAAmB,MAAOA,EAAmB,KACjDb,EAAca,KACb,CAAC7D,EAAWD,IAGf,sBAAKgE,UAAU,MAAf,UACI,sBACEA,UAAU,SADZ,UAGE,mDAGA,sBACEA,UAAU,0BADZ,UAGE,sBACEA,UAAU,WADZ,UAGE,uBACEC,QAAQ,cACRD,UAAU,cAFZ,qCAMA,uBACEE,KAAK,QACLX,KAAK,cACLd,GAAG,cACH0B,SAAUf,EACVK,MAAOzD,EACPL,IAAI,IACJF,IAAI,KACJ8C,MAAO,CAACZ,MAAO,OAEjB,wBACEsC,QAAQ,cACRD,UAAU,mBAFZ,UAIGhE,EAJH,aAMA,uBACA,uBACEiE,QAAQ,YACRD,UAAU,cAFZ,iCAMA,uBACEE,KAAK,QACLX,KAAK,YACLd,GAAG,YACH0B,SAAUf,EACVK,MAAOxD,EACPN,IAAI,IACJF,IAAI,OACJ8C,MAAO,CAACZ,MAAO,OAEjB,wBACEsC,QAAQ,YACRD,UAAU,mBAFZ,UAIG/D,EAJH,SAMA,uBACA,uBACE+D,UAAU,eADZ,qBAKA,uBACEE,KAAK,QACLX,KAAK,WACLd,GAAG,WACH0B,SAAUT,EACVU,SAAmB,IAAVjE,EACTkE,aAAY,IAEd,uBAAOJ,QAAQ,WAAf,kBAGA,uBACEC,KAAK,QACLX,KAAK,UACLd,GAAG,UACH0B,SAAUT,EACVU,QAAkB,IAATjE,EACTkE,YAAW,IAEb,uBAAOJ,QAAQ,UAAf,iBAGA,uBACEC,KAAK,QACLX,KAAK,iBACLd,GAAG,iBACH0B,SAAUT,EACVU,QAAkB,IAATjE,EACTkE,YAAW,IAEb,uBAAOJ,QAAQ,iBAAf,wBAIA,uBACEC,KAAK,QACLX,KAAK,iBACLd,GAAG,iBACH0B,SAAUT,EACVU,QAAkB,IAATjE,EACTkE,YAAW,IAEb,uBAAOJ,QAAQ,iBAAf,wBAGA,sBACED,UAAU,YADZ,UAGE,uBACEC,QAAQ,SACRD,UAAU,eAFZ,oBAMA,uBACEE,KAAK,WACLX,KAAK,SACLd,GAAG,SACH0B,SAzIO,SAACd,GACpBH,EAAUG,EAAMC,OAAOc,UAyIXA,QAAShE,IAEX,uBACE6D,QAAQ,SADV,sBAOJ,sBACED,UAAU,SADZ,UAGG/D,EAHH,cAGyBC,EAHzB,YAIE,uBACCmB,EALH,WAKwB,uBACL,MAAfnB,EAAuB,sBAAwB,YAIvD,cAAC,EAAD,CAEEH,QAASA,EACTC,YAAaA,EACbC,UAAWA,EACXC,WAAYA,EACZC,KAAMA,EACNC,OAAQA,EACRC,aAAc8C,GAPTnD,EAAcC,GASJ,MAAfC,EAAuB,6CAA+C,OC1L9EoE,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,U","file":"static/js/main.8e93ad7a.chunk.js","sourcesContent":["\nexport const generateColoursArray = () => {\n\tlet colours = []\n\tfor (let r = 8; r <= 256; r+=8) {\n\t\tfor (let g = 8; g <= 256; g+=8) {\n\t\t\tfor (let b = 8; b <= 256; b+=8) {\n\t\t\t\tcolours.push([r, g, b])\n\t\t\t}\n\t\t}\n\t}\n\treturn colours\n}\n\nexport const drawPalette = (colours, context, segmentSize, drawWidth) => {\n  let xpos = 0\n  let ypos = 0\n  let totalColours = 0\n  colours.forEach((colour) => {\n    const [r, g, b] = colour\n    const rect = {\n      x: xpos,\n      y: ypos,\n      width: segmentSize,\n      height: segmentSize\n    }\n    context.fillStyle = `RGB(${r}, ${g}, ${b})` \n    context.fillRect(rect.x, rect.y, rect.width, rect.height)\n    totalColours += 1\n    xpos = xpos + segmentSize\n    if (xpos >= drawWidth) {\n      ypos += segmentSize\n      xpos = 0\n    }\n  })\n  return totalColours\n}\n\n// HSL code came from: https://stackoverflow.com/questions/11923659/javascript-sort-rgb-values\nexport function rgbToHsl(c) {\n\tvar r = c[0]/255, g = c[1]/255, b = c[2]/255\n\tvar max = Math.max(r, g, b), min = Math.min(r, g, b)\n\tvar h, s, l = (max + min) / 2\n\n\tif(max === min) {\n\t\th = s = 0 // achromatic\n\t} else {\n\t\tvar d = max - min\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n\t\tswitch(max){\n\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break\n\t\tcase g: h = (b - r) / d + 2; break\n\t\tdefault: h = (r - g) / d + 4; break\n\t\t}\n\t\th /= 6\n\t}\n\treturn [h * 360, s * 100, l * 100]\n}\n\nexport const hslSort = (colours, sort) => {\n  if (sort === -1) {\n      return colours // no sort\n    } else {\n    return colours.map(function(c, i) {\n      // Convert to HSL and keep track of original indices\n      return {color: rgbToHsl(c), index: i}\n    }).sort(function(c1, c2) {\n      // Sort by hue, saturation or luminoscity value\n      return c1.color[sort] - c2.color[sort]\n    }).map(function(data) {\n      // Retrieve original RGB color\n      return colours[data.index]\n    })\n  }\n} \n\n\n  ","import React, { useEffect, useState, useRef, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { drawPalette, hslSort } from '../helpers'\n\nexport const Palette = ({ \n  colours,\n  segmentSize,\n  drawWidth,\n  drawHeight,\n  sort,\n  border,\n  responseData\n}) => {\n\n\tconst canvasRef = useRef()\n\tconst [context, setContext] = useState()\n  const responder = useCallback((data) => {\n    responseData(data)\n  }, [responseData])\n\n\tuseEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\tconst renderCtx = canvasRef.current.getContext('2d')\n\t\t\tif (renderCtx) {\n\t\t\t\tsetContext(renderCtx)\n\t\t\t}\n\t\t}\n\t\tif (context) {\n      let colourCount = drawPalette(hslSort(colours, sort), context, segmentSize, drawWidth)\n      responder(colourCount)\n\t\t}\n\t}, [context, segmentSize, colours, drawWidth, sort, responder])\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\ttextAlign: 'center',\n\t\t\t}}>\n\t\t\t<canvas\n\t\t\t\tid=\"canvas\"\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={drawWidth}\n\t\t\t\theight={drawHeight}\n\t\t\t\tstyle={{\n\t\t\t\t\tborder: (border === true ? '2px solid black' : ''),\n\t\t\t\t\tmarginTop: 20,\n\t\t\t\t}}\n\t\t\t></canvas>\n\t\t</div>\n\t)\n}\n\nPalette.propTypes = {\n\tcolours: PropTypes.array.isRequired,\n  segmentSize: PropTypes.number.isRequired,\n\tdrawWidth: PropTypes.number.isRequired,\n\tdrawHeight: PropTypes.number.isRequired,\n\tsort: PropTypes.number.isRequired,\n\tborder: PropTypes.bool.isRequired,\n\tresponseData: PropTypes.func.isRequired,\n}","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport { Palette } from './components/Palette'\nimport { generateColoursArray } from './helpers'\n\nfunction App() {\n  const [colours, setColours] = useState([0,0,0])\n\tconst [segmentSize, setSegmentSize] = useState(4)\n\tconst [sort, setSort] = useState(-1)\n\tconst [drawWidth, setDrawWidth] = useState(1024)\n  const [drawHeight, setDrawHeight] = useState(512)\n  const [border, setBorder] = useState(true)\n  const [totalColours, setTotalColours] = useState(0)\n\n  const handleSlider = (event) => {\n    if (event.target.name === 'segmentSize') {\n      setSegmentSize(parseInt(event.target.value))\n    } else if (event.target.name === 'drawWidth') {\n      setDrawWidth(parseInt(event.target.value))\n    }\n  }\n  const handleSort = (event) => {\n    setSort(parseInt(event.target.dataset.sort))\n  }\n  const toggleBorder = (event) => {\n    setBorder(event.target.checked)\n  }\n\n  useEffect(()=>{\n    setColours(generateColoursArray())\n  },[])\n  \n  useEffect(() => {\n    let calculatedHeight = Math.floor((32768 / Math.floor(drawWidth / segmentSize)) * segmentSize)\n    if (calculatedHeight > 20000) calculatedHeight = 20000 // set a max size to prevent killing browser\n    setDrawHeight(calculatedHeight)\n  }, [drawWidth, segmentSize])\n\n\treturn (\n\t\t<div className=\"App\">\n      <div\n        className=\"header\"\n      >\n        <h4>\n          Palette Challenge\n        </h4>\n        <div\n          className=\"controls-status-wrapper\"\n        >\n          <div\n            className=\"controls\"\n          >\n            <label\n              htmlFor=\"segmentSize\"\n              className=\"sliderLabel\"\n            >\n              Size of Colour Segments\n            </label>\n            <input\n              type=\"range\"\n              name=\"segmentSize\"\n              id=\"segmentSize\"\n              onChange={handleSlider}\n              value={segmentSize}\n              min=\"1\"\n              max=\"50\"\n              style={{width: 400}}\n            />\n            <label \n              htmlFor=\"segmentSize\"\n              className=\"sliderValueLabel\"\n            >\n              {segmentSize} px²\n            </label>\n            <br />\n            <label \n              htmlFor=\"drawWidth\"\n              className=\"sliderLabel\"\n            >\n              Canvas Width Limits\n            </label>\n            <input\n              type=\"range\"\n              name=\"drawWidth\"\n              id=\"drawWidth\"\n              onChange={handleSlider}\n              value={drawWidth}\n              min=\"0\"\n              max=\"2048\"\n              style={{width: 400}}\n              />\n            <label \n              htmlFor=\"drawWidth\"\n              className=\"sliderValueLabel\"\n            >\n              {drawWidth} px\n            </label>\n            <br />\n            <label\n              className=\"optionsLabel\"\n            >\n              Sorting \n            </label>\n            <input\n              type=\"radio\"\n              name=\"sortNone\"\n              id=\"sortNone\"\n              onChange={handleSort}\n              checked={sort === -1 }\n              data-sort={-1}\n            />\n            <label htmlFor=\"sortNone\">\n              None\n            </label>\n            <input\n              type=\"radio\"\n              name=\"sortHue\"\n              id=\"sortHue\"\n              onChange={handleSort}\n              checked={sort === 0 }\n              data-sort={0}\n            />\n            <label htmlFor=\"sortHue\">\n              Hue\n            </label>\n            <input\n              type=\"radio\"\n              name=\"sortSaturation\"\n              id=\"sortSaturation\"\n              onChange={handleSort}\n              checked={sort === 1 }\n              data-sort={1}\n            />\n            <label htmlFor=\"sortSaturation\">\n              Saturation\n            </label>\n            \n            <input\n              type=\"radio\"\n              name=\"sortLuminosity\"\n              id=\"sortLuminosity\"\n              onChange={handleSort}\n              checked={sort === 2 }\n              data-sort={2}\n            />\n            <label htmlFor=\"sortLuminosity\">\n              Luminosity\n            </label>\n            <div\n              className=\"borderDiv\"\n            >\n              <label\n                htmlFor=\"border\"\n                className=\"optionsLabel\"\n              >\n                Border\n              </label>\n              <input\n                type=\"checkbox\"\n                name=\"border\"\n                id=\"border\"\n                onChange={toggleBorder}\n                checked={border}\n              />\n              <label\n                htmlFor=\"border\"\n              >\n                On\n              </label>\n            </div>\n          </div>\n          <div\n            className=\"status\"\n          >\n            {drawWidth}px width x {drawHeight}px height\n            <br />\n            {totalColours} colours<br />\n            { drawHeight === 20000 ? 'Max height reached!' : ''}\n          </div>\n        </div>\n      </div>\n      <Palette\n        key={segmentSize + drawWidth}\n        colours={colours}\n        segmentSize={segmentSize}\n        drawWidth={drawWidth}\n        drawHeight={drawHeight}\n        sort={sort}\n        border={border}\n        responseData={setTotalColours}\n      />\n      { drawHeight === 20000 ? 'Sorry, we have to draw the line somewhere!' : ''}\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n"],"sourceRoot":""}